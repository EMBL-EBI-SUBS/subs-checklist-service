buildscript {
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.21.RELEASE")
        classpath 'org.hidetake:gradle-ssh-plugin:1.1.3'
    }
}

group 'uk.ac.ebi.subs'
version '1.1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'org.springframework.boot'
apply plugin: 'maven'
apply plugin: 'application'
apply plugin: 'org.hidetake.ssh'

mainClassName = "uk.ac.ebi.subs.checklistservice.ChecklistServiceApplication"

repositories {
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
        mavenCentral()
        mavenLocal()
}

dependencies {
    compile("uk.ac.ebi.subs:subs-repository:2.30.1-SNAPSHOT")

    compileOnly("org.projectlombok:lombok:1.16.18")
    compile 'org.codehaus.groovy:groovy-all:2.4.10'
    compile('commons-io:commons-io:2.6')

    testCompile("junit:junit")
    testCompile("org.springframework.boot:spring-boot-starter-test")
}

task sourceJar(type: Jar) { from sourceSets.main.allJava }

artifacts {
    archives jar
    archives sourceJar {
        classifier "sources"
        destinationDir = new File("build/libs/sources")
    }
}

task externalCiTest(type: Test) {
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat = 'full'
    }
}

configure(externalCiTest){
    group = 'verification'
    description = 'Run tests suitable for our external continuous integration environment.'
}

springBoot {
    executable = true
    buildInfo()
}

ssh.settings {
    user = 'sub_adm'
}

if (project.hasProperty('sshKeyFile')) {
    ssh.settings.identity = new File(sshKeyFile)
}

if (project.hasProperty('sshPassphrase')) {
    ssh.settings.passphrase = sshPassphrase
}

task printJarName {
    doLast {
        println "$jar.archivePath.name"
    }

}

task printJarFullPath {
    doLast {
        println "$jar.archivePath.absolutePath"
    }
}

ext.gradle_env = hasProperty('env') ? env : 'dev'

def devDeployHostName = hasProperty(project.name + "DevDeployTarget") ? getProperty(project.name + "DevDeployTarget") : 'localhost'
def testDeployHostName = hasProperty(project.name + "TestDeployTarget") ? getProperty(project.name + "TestDeployTarget") : 'localhost'
def prodDeployHostName = hasProperty(project.name + "ProdDeployTarget") ? getProperty(project.name + "ProdDeployTarget") : 'localhost'

remotes {
    submission_dev {
        role('dev')
        host = devDeployHostName
    }
    submission_test {
        role('test')
        host = testDeployHostName
    }
    submission_prod {
        role('prod')
        host = prodDeployHostName
    }
}

task deployJar(type: SshTask, dependsOn: 'assemble') {
    doLast {
        def mainDeployDir = "/data/$gradle_env/$project.name"
        sshRun(mainDeployDir)
    }
    ssh.settings {
        knownHosts = allowAnyHosts
    }
}

private Object sshRun(String mainDeployDir) {
    def uploadJarFileName = name + "-"  + version + "." + System.currentTimeMillis() + ".jar"
    String jarDeployDir = mainDeployDir + "/jar"

    String convScriptSrcDir = projectDir.getAbsolutePath() + "/data-definitions/tools/ena-checklists-to-usi"
    String convScriptName = "convert_to_usi.pl"

    ssh.run {
        session(remotes.role(gradle_env)) {
            execute "/homes/sub_adm/create_dirs.sh $gradle_env $project.name", ignoreError: false
            println "Uploading jar $jar.archivePath.name to $jarDeployDir/$uploadJarFileName  area on $remote"
            put(jar.archivePath.absolutePath, jarDeployDir + "/" + uploadJarFileName)
            println "creating symbolic link to $jar.archiveName"
            def result = execute "ln -s -f $jarDeployDir/$uploadJarFileName $jarDeployDir/$jar.baseName" + ".jar", ignoreError: true
            println result
            println "updating permissions of $jarDeployDir/$jar.archiveName"
            execute "chmod u+x $jarDeployDir/*", ignoreError: false
            println "Uploading conversion script $convScriptSrcDir/$convScriptName to $mainDeployDir area on $remote"
            put(convScriptSrcDir + "/" + convScriptName, mainDeployDir + "/" + convScriptName)
            println "updating permissions of $mainDeployDir/$convScriptName"
            execute "chmod u+x $mainDeployDir/$convScriptName", ignoreError: false
        }
    }
}

task testSsh(type: SshTask) {
    doLast {
        sshTestRun()
    }
    ssh.settings {
        knownHosts = allowAnyHosts
    }
}
private Object sshTestRun(){
    ssh.run {
        session(remotes.role(gradle_env)){
            println "started ssh session"
        }
    }
}
